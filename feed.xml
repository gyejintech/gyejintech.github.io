

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:4000/</id>
  <title>Jogyejin</title>
  <subtitle>기술블로그 &amp;&amp; 프로젝트공유</subtitle>
  <updated>2024-08-02T22:15:14+09:00</updated>
  <author>
    <name>Jogyejin</name>
    <uri>http://0.0.0.0:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://0.0.0.0:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Jogyejin </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Git(깃) 여러대 PC에서 동기화하는방법</title>
    <link href="http://0.0.0.0:4000/posts/usegit02/" rel="alternate" type="text/html" title="Git(깃) 여러대 PC에서 동기화하는방법" />
    <published>2024-06-30T12:33:00+09:00</published>
  
    <updated>2024-07-09T21:26:22+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/usegit02/</id>
    <content src="http://0.0.0.0:4000/posts/usegit02/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Utils" />
    
    <category term="Git" />
    
  

  
    <summary>
      





      과정
여러대의 PC가 존재하고 모든 PC는 하나의 레포지스터리를 바라보고 업데이트를 한다고 과정한다

방법
** PC에 Git 설치하는 방법과 레포지스터리 생성 방법은 생략 **

Step01. 맨 처음 업로드하는 pc작업


# git 사용 계정 등록
$git config --global user.name "gyejindev"
$git config --global user.email "gyejin.dev@gmail.com"

# git에 반영할 폴더로 이동
$cd myapp

#git 폴더 생성 및 초기화
$git init

#git 레포지스터리 연결(링크는 레포지스토리 생성하면 얻을 수 있는 git 링크)
$git remote set-url origin https://계정이름@github.com/g...
    </summary>
  

  </entry>

  
  <entry>
    <title>컴포넌트 분리한 todo 앱 만들기</title>
    <link href="http://0.0.0.0:4000/posts/example_todo/" rel="alternate" type="text/html" title="컴포넌트 분리한 todo 앱 만들기" />
    <published>2024-06-28T12:33:00+09:00</published>
  
    <updated>2024-06-28T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/example_todo/</id>
    <content src="http://0.0.0.0:4000/posts/example_todo/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Framework" />
    
    <category term="React" />
    
  

  
    <summary>
      





      결과물



파일 구성


  components 폴더 생성
  components/Controller.js, viewers.js 파일 생성


코드 작성

App.js


  App.js


import "./styles.css";
import Viewers from "./components/Viewers";
import Controller from "./components/Controller";
import { useState } from "react";

export default function App() {
  const [count, setCount] = useState(1);
  const handleSetCount = (value) =&amp;gt; {
    setCount(count + va...
    </summary>
  

  </entry>

  
  <entry>
    <title>컴포넌트 분리한 카운터웹 만들기</title>
    <link href="http://0.0.0.0:4000/posts/example_counter/" rel="alternate" type="text/html" title="컴포넌트 분리한 카운터웹 만들기" />
    <published>2024-06-27T12:33:00+09:00</published>
  
    <updated>2024-06-27T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/example_counter/</id>
    <content src="http://0.0.0.0:4000/posts/example_counter/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Framework" />
    
    <category term="React" />
    
  

  
    <summary>
      





      결과물



파일 구성


  components 폴더 생성
  components/Controller.js, viewers.js 파일 생성


코드 작성

App.js


  App.js


import "./styles.css";
import Viewers from "./components/Viewers";
import Controller from "./components/Controller";
import { useState } from "react";

export default function App() {
  const [count, setCount] = useState(1);
  const handleSetCount = (value) =&amp;gt; {
    setCount(count + va...
    </summary>
  

  </entry>

  
  <entry>
    <title>Step7 React Props와 구조분해, 스프레드 연산자</title>
    <link href="http://0.0.0.0:4000/posts/react07/" rel="alternate" type="text/html" title="Step7 React Props와 구조분해, 스프레드 연산자" />
    <published>2024-06-26T12:33:00+09:00</published>
  
    <updated>2024-06-26T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/react07/</id>
    <content src="http://0.0.0.0:4000/posts/react07/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Framework" />
    
    <category term="React" />
    
  

  
    <summary>
      





      React Props와 구조분해


  리액트에서는 부모가 자식 컴포넌트에 단인 객체 형태로 값을 전달할 수 있다.

  이 객체를 리액트에서는 Props(Properties)라고 하며 Props는 Properties의 줄임말이다.


Props를 사용해보기

Props를 사용하기전에 먼저 CRA를 사용하여 기본 프로젝트를 생성 후 필요없는 부분은 삭제하고 Header  컴포넌트 하나를 생성하여 최상위  root컴포넌트인 App 컴포넌트에서 자식 Header 컴포넌트를 렌더링 하도록 한다



(1) 사용하지 않는 파일 삭제


  src/App.test.js
  src/logo.svg
  src/reportWebVitals.js
  src/setupTest.js




(2) App.js 파일 수정 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Step6 useState와 useRef Hook</title>
    <link href="http://0.0.0.0:4000/posts/react06/" rel="alternate" type="text/html" title="Step6 useState와 useRef Hook" />
    <published>2024-06-25T12:33:00+09:00</published>
  
    <updated>2024-06-25T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/react06/</id>
    <content src="http://0.0.0.0:4000/posts/react06/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Framework" />
    
    <category term="React" />
    
  

  
    <summary>
      





      React Hook의 개념


  Hook은 리액트 v16.8에 새로 도입된 기능으로서 함수형 컴포넌트에서도 상태 관리를 할 수 있는 useState 그리고 렌더링 직후 작업을 설정하는 useEffect 등의 기능들을 제공한다


useState


  가장 기본적인 Hook으로서 상태를 관리하기 위해 사용되는 Hook이다



  함수형 컴포넌트 안에 state를 추가하여 사용한다
  현재 상태를 나타내는 state값과 이 상태를 변경하는 setState값을 한 쌍으로 제공한다
  state는 초기값을 설정할 수 있으며, 초기값은 첫 렌더링 때 한번 사용된다.
  state는 객체일 필요 없이 문자열, 숫자, boolean, 배열, null, 객체 등의 여러가지 다양한 값을 넣을 수 있다.
  use...
    </summary>
  

  </entry>

</feed>


