

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://0.0.0.0:4000/</id>
  <title>Jogyejin</title>
  <subtitle>기술블로그 &amp;&amp; 프로젝트공유</subtitle>
  <updated>2024-11-26T22:03:34+09:00</updated>
  <author>
    <name>Jogyejin</name>
    <uri>http://0.0.0.0:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://0.0.0.0:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://0.0.0.0:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Jogyejin </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>NestJS Controller</title>
    <link href="http://0.0.0.0:4000/posts/nestjs_controller/" rel="alternate" type="text/html" title="NestJS Controller" />
    <published>2024-10-04T12:33:00+09:00</published>
  
    <updated>2024-10-04T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/nestjs_controller/</id>
    <content src="http://0.0.0.0:4000/posts/nestjs_controller/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Framework" />
    
    <category term="NestJs" />
    
  

  
    <summary>
      





      NestJS Controller

  컨트롤러는 Client로부터 들어오는 요청을 처리 하고 해당 클라이언트에 응답을 반환하는 역할을 해줍니다
NestJS에서의 기본 컨트롤러를 만들기 위해서는 클래스와 데코레이터를 사용합니다 데코레이터(@)는 클래스를 필요한 메타데이터와 연결하고 Nest가 라우팅 맵을 만들 수 있도록 합니다









Controller 예제

import { Controller, Get } from '@nestjs/common';

@Controller('cats')
export class CatsController {
  @Get()
  findAll(): string {
    return 'This action returns all cats';
  }
}



  (1) ...
    </summary>
  

  </entry>

  
  <entry>
    <title>NestJS 시작하기</title>
    <link href="http://0.0.0.0:4000/posts/nestjs_start/" rel="alternate" type="text/html" title="NestJS 시작하기" />
    <published>2024-10-03T12:33:00+09:00</published>
  
    <updated>2024-10-03T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/nestjs_start/</id>
    <content src="http://0.0.0.0:4000/posts/nestjs_start/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Framework" />
    
    <category term="NestJs" />
    
  

  
    <summary>
      





      NestJS를 사용하기 위한 환경구성

  NestJS를 사용하기위해서는 nodejs와 npm이 선행적으로 설치 되어있어야합니다
👉🏻Nodejs 공식 다운로드







NestJS 설치하기
npm install -g @nestjs/cli







NestJS 프로젝트 생성하기
nest new 프로젝트 이름






NestJS 프로젝트 실행하기
npm run start:dev







NestJS 기본 폴더 구조

  app.controller.ts : 애플리케이션의 라우팅 및 http 요청 처리를 담당하는 컨트롤러 파일
  app.controller.spec.ts : 테스트 파일 (컨트롤러에 대한 단위 테스트)
  app.module.ts : 애플리케이션의 최상위 모듈파일
  app.se...
    </summary>
  

  </entry>

  
  <entry>
    <title>NestJS 프레임워크 알아보기</title>
    <link href="http://0.0.0.0:4000/posts/nestjs_about/" rel="alternate" type="text/html" title="NestJS 프레임워크 알아보기" />
    <published>2024-10-01T12:33:00+09:00</published>
  
    <updated>2024-10-01T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/nestjs_about/</id>
    <content src="http://0.0.0.0:4000/posts/nestjs_about/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Framework" />
    
    <category term="NestJs" />
    
  

  
    <summary>
      





      NestJS가 뭐야?


  NestJS는 자바스크립트나 타입스크립트로 서버 애플리케이션을 개발할 수 있는 백엔드 웹 프레임워크입니다






NestJS의 특징

  개발자와 팀이 테스트가 가능합니다
  확장이 가능하며 유지보수성이 뛰어난 아키텍처를 제공합니다
  javascript, typescript를 지원하여 기존의 코드 실수를 보완하였습니다
  모듈화된 구조로 각 애플리케이션을 모듈 단위로 나눠서 개발할 수 있습니다
  의존성 주입 패턴을 지원하여 코드의 재사용성과 유지보수성을 높였습니다


    </summary>
  

  </entry>

  
  <entry>
    <title>CSS 레이아웃</title>
    <link href="http://0.0.0.0:4000/posts/css_layout/" rel="alternate" type="text/html" title="CSS 레이아웃" />
    <published>2024-09-04T12:33:00+09:00</published>
  
    <updated>2024-09-04T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/css_layout/</id>
    <content src="http://0.0.0.0:4000/posts/css_layout/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Develop" />
    
    <category term="Css" />
    
  

  
    <summary>
      





      
  레이아웃(Layout)이란? : 구성 요소를 공간에 효과적으로 배열하는 일,  또는 그 기술
웹 요소를 올바른 장소에 배치하는 기술을 말한다.
CSS 레이아웃 기술은 형제 요소들을 가지런히 정렬할 수 있게 해주며 요소가 컨테이너 내부에 어떤 위치에 놓이게 될지 결정할 수 있다.


Flexbox

  플렉스박스는 행 또는 열을 주축으로 설정하여 웹 요소를 배치 및 정렬하는 1차원 레이아웃 방식을 말한다.
요소의 배치와 정렬은 플렉스 컨테이너와 플렉스 아이템간의 상호작용을 통해 결정된다.

  
    플렉스 컨테이너 : 플렉스박스 방식으로 레이아웃을 결정할 요소
    플렉스 아이템: 플렉스 컨테이너 내부에서 플렉스박스 방식으로 배치되는 요소 
  


##

Flexbox 기본 사용법

Flex...
    </summary>
  

  </entry>

  
  <entry>
    <title>Javascript join 메서드</title>
    <link href="http://0.0.0.0:4000/posts/javascript_join/" rel="alternate" type="text/html" title="Javascript join 메서드" />
    <published>2024-09-01T12:33:00+09:00</published>
  
    <updated>2024-09-01T12:33:00+09:00</updated>
  
    <id>http://0.0.0.0:4000/posts/javascript_join/</id>
    <content src="http://0.0.0.0:4000/posts/javascript_join/" />
    <author>
      <name>Jogyejin</name>
    </author>

  
    
    <category term="Develop" />
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      join 메서드 이해하기


  join 메서드는 배열 요소를 모두 연결해 하나의 문자열로 반환한다






join 메서드 사용해보기
let arr = ["안녕","자바스크립트","반가워"];

console.log(arr.join()); // 출력: 안녕,자바스크립트,반가워
console.log(arr.join("-")); // 출력: 안녕-자바스크립트-반가워


    </summary>
  

  </entry>

</feed>


